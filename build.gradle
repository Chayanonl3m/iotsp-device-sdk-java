apply plugin: 'java'
apply plugin: 'jacoco'

version = '1.0.0'

repositories {  
    mavenCentral()  
    maven { // Repo for official paho releases
      url "https://repo.eclipse.org/content/repositories/paho-releases"
    }
    
    maven { // Repo for official paho releases
      url "http://repo2.maven.org/maven2/org/bouncycastle"
    }

}  
  
dependencies {  
    compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.0.2'
    compile 'org.bouncycastle:bcprov-jdk15on:1.49'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.49'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.slf4j:slf4j-api:1.7.21'  
    compile 'org.slf4j:slf4j-jdk14:1.7.21'  
    
    //jawampa: wamp client library 
    compile "ws.wamp.jawampa:jawampa-core:0.4.1"
    //jawampa transport library
    compile "ws.wamp.jawampa:jawampa-netty:0.4.1"
    
    testCompile 'ch.qos.logback:logback-classic:1.1.3'
    testCompile 'ch.qos.logback:logback-core:1.1.3'  
    testCompile 'junit:junit:4.11'
}


task fullJar(type: Jar, dependsOn: build) {
        manifest {
        attributes 'Implementation-Title': 'iotsp Jar',
                'Implementation-Version': version,
                'Main-Class': 'com.cisco.deviceSdk'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    with jar
}

task ioxPackage(type: Copy, dependsOn: [fullJar]) {
    into "sampleApp/package/"    
    from 'build/classes/test'
    into ("libs")   { 
        from 'build/libs' 
    }
    into ("config")   { 
        from 'config' 
    }
    into ("data")   { 
        from 'data'
    }
    exclude '**/*.bak'
}

// 7
// OpsNow could be claim/gwClaim/get/http/mqtt/wamp/gwService
// run the commands as following 
// > gradle -POpsNow=claim uT 
def OpsNow = 'claim'
task unitTests(type: Exec, dependsOn: [fullJar]) {
    println 'running tools'    
    commandLine 'java', '-cp', 'build/libs/*:build/classes/test', 'IotspTools', OpsNow 
}

task claim(type: Exec, dependsOn: [fullJar]) {
    println 'running claim'    
    commandLine 'java', '-cp', 'build/libs/*:build/classes/test', 'IotspTools', 'claim'
}

task sampleTest(type: Exec, dependsOn: [fullJar]) {
    println 'running sysTest'
    commandLine 'java', '-cp', 'build/libs/*:build/classes/test', '-Djava.util.logging.config.file=config/logging.properties','TestSampleAll'
}

task sysTest(type: Exec, dependsOn: [fullJar]) {
    println 'running sysTest'
    commandLine 'java', '-cp', 'build/libs/*:build/classes/test', '-Djava.util.logging.config.file=config/logging.properties','TestSystem'
}

task deleteAll(type: Exec) {
    println 'deleting all' 
    commandLine 'rm', '-rf', 'build', 'sampleApp/package/config', 'sampleApp/package/lib', 'sampleApp/package/data', 'sampleApp/package/TestSystem.class', 'sampleApp/package/IotspTools.class', 'sampleApp/package/SdkUnitTest.class'
}

task preConfig(type: Exec) {
    println 'Preconfig test env' 
    commandLine 'sudo','sampleApp/package/sdkApp.sh' 
}


//code coverage
jacoco {
    reportsDir = file("$buildDir/reports/codecoverage")
}

test {
    testLogging.showStandardStreams = true
}

test { finalizedBy jacocoTestReport }

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
